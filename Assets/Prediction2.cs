using System.Collections; using System.Collections.Generic; using UnityEngine;  public class Prediction2 : MonoBehaviour {     public GameObject HittingBallPrefab;     public Transform HittingPivot;      //ダミーの球     [SerializeField]     private GameObject dummySphere;      //地面の座標     [SerializeField]     private float gp;      private Rigidbody rigid;     private float stopTime = 0.0f;      void Start()     {                 rigid = GetComponent<Rigidbody>();         rigid.isKinematic = true;         dummySphere.transform.position = transform.position;     }       void Update()     {          float x = Random.Range(-5.0f, 5.0f);         float y = Random.Range(1.0f, 10.0f);         float z = Random.Range(1.0f, 5.0f);          // 初速         Vector3 v0 = new Vector3(x, y, z);          if (Input.GetKeyDown(KeyCode.Space))         {             var t1 = (v0.y + Mathf.Sqrt(Mathf.Pow(-v0.y, 2.0f) + (-2 * -Physics.gravity.y * (-transform.position.y + gp)))) / (-Physics.gravity.y);             var t2 = (v0.y - Mathf.Sqrt(Mathf.Pow(-v0.y, 2.0f) + (-2 * -Physics.gravity.y * (-transform.position.y + gp)))) / (-Physics.gravity.y);              //秒数がNaNの時か秒数がマイナスの時は処理しない             if ((float.IsNaN(t1) && float.IsNaN(t2)) || (t1 < 0) && (t2 < 0))                 return;              //地面に落ちるまでの時間             stopTime = (t1 > 0) ? t1 : t2;              //地面に落ちる位置             var pos = new Vector3(v0.x * stopTime, gp, v0.z * stopTime);             pos.x += transform.position.x;             pos.z += transform.position.z;              //ダミーの球を落ちる位置に表示する             dummySphere.transform.position = pos;              rigid.isKinematic = false;             rigid.AddForce(v0, ForceMode.Impulse);         }        } } 